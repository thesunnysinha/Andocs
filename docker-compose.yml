services:
  db:
    image: postgres:16
    container_name: andocs_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./env/db.env
    ports:
      - 5432:5432
    networks:
      - andocs-network

  redis:
    image: redis:latest
    container_name: andocs_redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - andocs-network

  backend:
    build: ./services/backend
    command: python manage.py rungunicorn
    container_name: andocs_backend
    volumes:
      - andocs_backend:/app
      - static_volume:/app/staticfiles
    env_file:
      - ./env/backend.env
    depends_on:
      - db
      - redis
    networks:
      - andocs-network

  nginx:
    image: nginx:latest
    container_name: andocs_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - andocs-network

  celeryworker:
    build: ./services/backend
    command: python manage.py runceleryworker
    container_name: andocs_celery_worker
    volumes:
      - andocs_backend:/app
    env_file:
      - ./env/backend.env
    depends_on:
      - backend
      - db
      - redis
    networks:
      - andocs-network

  celerybeat:
    build: ./services/backend
    command: python manage.py runcelerybeat
    container_name: andocs_celery_beat
    volumes:
      - andocs_backend:/app
    env_file:
      - ./env/backend.env
    depends_on:
      - backend
      - db
      - redis
    networks:
      - andocs-network

  frontend:
    build: ./services/frontend
    container_name: andocs_frontend
    volumes:
      - andocs_frontend:/code/frontend/
    ports:
      - 3000:3000
    profiles:
      - dev
    depends_on:
      - backend
    networks:
      - andocs-network

volumes:
  postgres_data:
    driver: local
    name: andocs_backend_postgres_data

  andocs_backend:
    driver: local
    name: andocs_backend_backend
    driver_opts:
      type: none
      device: ./services/backend
      o: bind

  static_volume:
    driver: local

  andocs_frontend:
    driver: local
    name: andocs_backend_frontend
    driver_opts:
      type: none
      device: ./services/frontend
      o: bind

networks:
  andocs-network:
    driver: bridge
